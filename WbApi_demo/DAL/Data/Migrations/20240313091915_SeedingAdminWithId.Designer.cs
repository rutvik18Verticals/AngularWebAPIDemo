// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240313091915_SeedingAdminWithId")]
    partial class SeedingAdminWithId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.AppDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DAL.Entities.AppEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Updatedy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DAL.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 162, 85, 48, 98, 60, 9, 38, 35, 8, 80, 134, 93, 78, 209, 61, 71, 110, 113, 19, 150, 114, 5, 56, 87, 125, 196, 60, 80, 197, 48, 53, 12, 161, 47, 204, 45, 202, 17, 95, 130, 140, 229, 243, 193, 21, 20, 228, 76, 15, 145, 3, 123, 153, 203, 240, 223, 165, 156, 72, 113, 221, 234, 98, 109 },
                            PasswordSalt = new byte[] { 55, 89, 244, 18, 55, 246, 86, 143, 224, 188, 151, 75, 122, 130, 196, 34, 63, 183, 253, 226, 214, 160, 25, 47, 189, 228, 209, 205, 187, 241, 117, 252, 171, 252, 59, 108, 210, 187, 176, 243, 79, 112, 141, 144, 59, 92, 215, 2, 12, 110, 76, 231, 76, 155, 69, 239, 181, 74, 11, 41, 50, 251, 210, 178, 196, 38, 239, 48, 31, 23, 6, 151, 221, 232, 115, 112, 52, 24, 232, 8, 237, 208, 179, 86, 251, 57, 218, 45, 126, 252, 140, 122, 214, 75, 51, 185, 76, 69, 100, 162, 25, 56, 79, 215, 167, 129, 194, 160, 159, 166, 65, 158, 154, 192, 202, 83, 211, 52, 227, 138, 232, 240, 68, 130, 207, 223, 122, 213 },
                            Role = "admin",
                            Username = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
