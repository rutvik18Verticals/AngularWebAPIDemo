using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DAL.Data.Migrations
{
    /// <inheritdoc />
    public partial class TaskTableAssignedCOlumn : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 252, 17, 115, 84, 104, 146, 50, 16, 216, 104, 225, 105, 12, 42, 120, 64, 63, 19, 179, 205, 147, 215, 70, 198, 54, 119, 248, 123, 71, 50, 230, 5, 152, 149, 51, 4, 215, 64, 122, 186, 80, 93, 34, 193, 83, 112, 43, 227, 83, 174, 175, 68, 128, 112, 110, 90, 144, 228, 138, 135, 42, 88, 249, 143 }, new byte[] { 46, 64, 42, 45, 47, 87, 217, 5, 222, 195, 150, 173, 68, 42, 149, 111, 79, 240, 2, 144, 247, 240, 114, 96, 5, 43, 178, 10, 27, 234, 223, 237, 150, 238, 13, 88, 124, 107, 121, 128, 11, 126, 162, 173, 199, 196, 121, 33, 88, 71, 164, 18, 152, 173, 47, 125, 164, 243, 145, 130, 37, 82, 137, 59, 134, 219, 169, 208, 205, 92, 128, 242, 195, 204, 183, 123, 145, 244, 73, 108, 26, 96, 169, 167, 15, 200, 79, 254, 237, 116, 85, 19, 131, 43, 26, 197, 109, 184, 10, 134, 163, 135, 228, 191, 38, 211, 63, 197, 164, 46, 117, 195, 154, 144, 1, 153, 51, 161, 41, 46, 231, 47, 179, 124, 11, 171, 45, 231 } });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 103, 52, 239, 19, 162, 21, 36, 171, 13, 96, 152, 221, 170, 109, 219, 52, 138, 13, 129, 205, 241, 14, 89, 23, 214, 99, 193, 181, 73, 50, 170, 125, 48, 203, 41, 54, 114, 21, 2, 141, 50, 244, 243, 104, 255, 190, 199, 160, 25, 246, 103, 254, 170, 14, 242, 94, 137, 113, 109, 151, 235, 247, 36, 92 }, new byte[] { 3, 93, 161, 87, 2, 93, 167, 16, 178, 159, 175, 79, 87, 59, 190, 100, 68, 184, 8, 50, 66, 157, 193, 108, 255, 45, 97, 111, 85, 169, 165, 161, 5, 127, 172, 75, 183, 122, 105, 250, 176, 132, 93, 130, 81, 236, 195, 200, 128, 79, 192, 113, 30, 66, 135, 139, 21, 134, 129, 177, 143, 20, 6, 183, 167, 144, 54, 171, 80, 177, 211, 24, 165, 3, 61, 155, 106, 105, 156, 189, 80, 207, 232, 119, 158, 130, 164, 161, 84, 12, 89, 173, 166, 72, 24, 0, 233, 134, 92, 6, 254, 98, 9, 196, 94, 118, 84, 98, 220, 92, 217, 252, 0, 148, 182, 22, 145, 157, 68, 176, 62, 208, 174, 167, 14, 248, 81, 78 } });
        }
    }
}
